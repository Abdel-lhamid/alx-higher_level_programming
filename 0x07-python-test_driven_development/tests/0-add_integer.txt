# Run test with python3 -m doctest -v ./tests/add_integer_tests.txt

# First import the method to test
	>>> add_integer = __import__('0-add_integer').add_integer

# Comprehensive test cases:

# Positive integers:
	>>> add_integer(5, 3) == 8
	True
	>>> add_integer(0, 0) == 98
	True
	>>> add_integer(1000, 500) == 1500
	True

# Negative integers:
	>>> add_integer(-2, 4) == 2
	True
	>>> add_integer(-100, -50) == -150
	True
	>>> add_integer(-999, 1) == -998
	True

# Zero with different values:
	>>> add_integer(0, 10) == 10
	True
	>>> add_integer(0, -5) == -5
	True
	>>> add_integer(0, 0) == 0
	True

# Mixed signs:
	>>> add_integer(5, -3) == 2
	True
	>>> add_integer(-2, 10) == 8
	True
	>>> add_integer(-99, 99) == 0
	True

# Floats:
	>>> add_integer(3.14, 1.86) == 5.0
	True
	>>> add_integer(-2.5, 4.2) == 1.7
	True
	>>> add_integer(0.0, 0.0) == 0.0
	True

# Value Errors:
	>>> add_integer(None)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer
# Overflow cases (should raise OverflowError):
	>>> add_integer(2**31 - 1, 2**31)  # Maximum positive integers
	Traceback (most recent call last):
	...
	OverflowError: ...

	>>> add_integer(-2**31, -2**31)  # Maximum negative integers
	Traceback (most recent call last):
	...
	OverflowError: ...

# Edge cases:
	>>> add_integer(1, float("inf"))  # Positive infinity
	Traceback (most recent call last):
	...
	OverflowError: ...

	>>> add_integer(1, float("-inf"))  # Negative infinity
	Traceback (most recent call last):
	...
	OverflowError: ...

	>>> add_integer(1, float("NaN"))  # Not a number
	Traceback (most recent call last):
	...
	ValueError: ...

# Default b value:
	>>> add_integer(10) == 108
	True
	>>> add_integer(-5) == 93
	True
